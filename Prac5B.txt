import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.optimizers import Adam
from mlxtend.plotting import plot_decision_regions


X = np.array([])
Y = np.array([])

plt.scatter(X[:, 0], X[:, 1], c=y[:len(X)], cmap="coolwarm")
plt.colorbar()
plt.show()


model = Sequential()
model.add(Dense(128, input_dim=2, activation="relu"))
model.add(Dense(128, activation="relu"))
model.add(Dense(1, activation="sigmoid"))
adam = Adam(learning_rate=0.01)


model.compile(loss="binary_crossentropy", optimizer=adam, metrics=["accuracy"])


history = model.fit(X, y, epochs=50, validation_split=0.2, verbose=1)


y_vis = y[:39].astype(int)

plot_decision_regions(X, y_vis.astype('int'), clf=model, legend=2)
plt.xlim(-0.7, 0.5)
plt.ylim(-0.8, 0.8)
plt.title("Decision Boundary")
plt.show()


plt.figure(figsize=(12, 5))

# 1. Loss (Training + Validation)
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label="Training Loss")
plt.plot(history.history['val_loss'], label="Validation Loss")
plt.title("Loss over Epochs")
plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.legend()

# 2. Accuracy (Training + Validation)
plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label="Training Accuracy")
plt.plot(history.history['val_accuracy'], label="Validation Accuracy")
plt.title("Accuracy over Epochs")
plt.xlabel("Epochs")
plt.ylabel("Accuracy")
plt.legend()

plt.tight_layout()
plt.show()


Dropout Model

model = Sequential()
model.add(Dense(128, input_dim=2, activation="relu"))
model.add(Dropout(0.5))
model.add(Dense(128, activation="relu"))
model.add(Dropout(0.5))
model.add(Dense(1, activation="sigmoid"))


# --- Compile model ---
adam = Adam(learning_rate=0.01)   # Optimizer with custom learning rate
model.compile(
    loss='binary_crossentropy',   # Suitable for binary classification
    optimizer=adam,
    metrics=['accuracy']          # Track accuracy during training
)


# --- Train model ---
history = model.fit(
    X, y,
    epochs=50,             # Number of epochs
    validation_split=0.2,   # Use 20% of data for validation
    verbose=1               # Show training progress
)


# --- Decision Boundary Plot ---
plt.figure(figsize=(6, 6))
plot_decision_regions(X, y_vis.astype(int), clf=model, legend=2)
plt.xlim(-0.7, 0.5)
plt.ylim(-0.8, 0.8)
plt.title("Decision Boundary (p = 0.5)")
plt.show()


# --- Training History Plots ---
plt.figure(figsize=(12, 5))

# Plot Loss
plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label="Training Loss")
plt.plot(history.history['val_loss'], label="Validation Loss")
plt.title("Loss over Epochs")
plt.xlabel("Epochs")
plt.ylabel("Loss")
plt.legend()

# Plot Accuracy
plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label="Training Accuracy")
plt.plot(history.history['val_accuracy'], label="Validation Accuracy")
plt.title("Accuracy over Epochs")
plt.xlabel("Epochs")
plt.ylabel("Accuracy")
plt.legend()

plt.show()