import pandas as pd
import numpy as np
import tensorflow as tf

from tensorflow import keras
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras import layers, Sequential
from tensorflow.keras.layers import Dense
from sklearn.metrics import accuracy_score

df = pd.read_csv("/content/Prac 02B -- mnist_train.csv")
df

x = df.drop('label', axis=1)
y = df['label']

x_train, x_test, y_train, y_test = train_test_split(x,y, test_size=0.2, random_state=0)

Std = StandardScaler()
x_train = Std.fit_transform(x_train)
x_test =  Std.transform(x_test)


model = Sequential()
model.add(Dense(units=128, activation='relu', input_dim=784))
model.add(Dense (units=80, activation='relu'))
model.add(Dense(units=10, activation='softmax'))
model.summary()

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.layers[0].get_weights()

model.fit(x_train, y_train, batch_size=50, epochs=5,verbose= 1 , validation_split=0.2)

y_pred = model.predict(x_test)
y_pred_classes = y_pred.argmax(axis=1)

# Case 1: y_test already contains class labels (e.g., 0,1,2,â€¦)
if len(y_test.shape) == 1:
    Accuracy = accuracy_score(y_test, y_pred_classes)
# Case 2: y_test is one-hot encoded
else:
    Accuracy = accuracy_score(y_test.argmax(axis=1), y_pred_classes)

print("Accuracy:", Accuracy)